on:
  push:
    branches:
      - main
      - v*
      - issue/*
      - housekeeping/*
      - release/*
name: 'Porsche Design System'
env:
  PDS_NODE_DOCKER_IMAGE: ghcr.io/porsche-design-system/porsche-design-system/node:16.15.1-stretch-slim
  PDS_PLAYWRIGHT_DOCKER_IMAGE: ghcr.io/porsche-design-system/porsche-design-system/playwright:v1.35.1-focal
jobs:
  build-and-test:
    uses: ./.github/workflows/build-and-test.yml
    secrets:
      github-token: ${{ secrets.GITHUB_TOKEN }}
  assets-deployment:
    name: 'Assets Deployment'
    needs:
      - production-builds
      - components-unit
      - components-js-unit
      - components-js-e2e-puppeteer
      - components-js-e2e-playwright
      - components-js-vrt-puppeteer
      - components-js-vrt-playwright
      - components-angular
      - components-react
      - components-react-remix
      - components-react-nextjs
      - components-vue
      - crawler-e2e-puppeteer
      - fallbacks
      - component-meta
      - shared
      - storefront-unit
      - storefront-e2e
      - storefront-a11y
      - storefront-vrt
      - utilities
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3
      - name: 'Setup and install'
        uses: ./.github/actions/setup-and-install
        with:
          install: false
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Restore Assets Artifact'
        uses: actions/download-artifact@v3
        with:
          name: assets-cdn
          path: ./packages/assets/cdn
      - name: 'Deploy Assets to CDN'
        uses: ./.github/actions/docker-run-playwright
        env:
          CDN_USER: ${{ secrets.CDN_USER }}
          CDN_SSH_KEY: ${{ secrets.CDN_SSH_KEY }}
        with:
          entrypoint: run-deploy-assets
  storefront-deployment:
    name: 'Storefront Deployment'
    needs:
      - production-builds
      - components-unit
      - components-js-unit
      - components-js-e2e-puppeteer
      - components-js-e2e-playwright
      - components-js-vrt-puppeteer
      - components-js-vrt-playwright
      - components-angular
      - components-react
      - components-react-remix
      - components-react-nextjs
      - components-vue
      - crawler-e2e-puppeteer
      - fallbacks
      - component-meta
      - shared
      - storefront-unit
      - storefront-e2e
      - storefront-a11y
      - storefront-vrt
      - utilities
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3
      - name: 'Setup and install'
        uses: ./.github/actions/setup-and-install
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Restore Build Artifact'
        uses: actions/download-artifact@v3
        with:
          name: storefront-build
          path: ./packages/storefront/dist
      - name: 'Deploy'
        uses: ./.github/actions/docker-run-playwright
        env:
          ALGOLIA_APP_ID: ${{ secrets.ALGOLIA_APP_ID }}
          ALGOLIA_API_KEY: ${{ secrets.ALGOLIA_API_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        with:
          entrypoint: run-deploy-storefront
  smoke-test:
    name: 'Smoke Test'
    needs:
      - assets-deployment
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3
      - name: 'Setup and install'
        uses: ./.github/actions/setup-and-install
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Restore Assets Build Artifact'
        uses: actions/download-artifact@v3
        with:
          name: assets-build
          path: ./packages/assets/dist
      - name: 'Restore Components JS Build Artifact'
        uses: actions/download-artifact@v3
        with:
          name: components-js-prod-build
          path: ./packages/components-js/dist
      - name: 'Restore Components React Build Artifact'
        uses: actions/download-artifact@v3
        with:
          name: components-react-prod-build
          path: ./packages/components-react/dist/react-wrapper
      - name: 'Restore Chunks Manifest Build Artifact'
        uses: actions/download-artifact@v3
        with:
          name: components-js-chunks-manifest-prod-build
          path: ./packages/components-js/projects/components-wrapper/lib
      - name: 'Restore Shared Build Artifact'
        uses: actions/download-artifact@v3
        with:
          name: shared-build
          path: ./packages/shared/dist
      - name: 'Smoke Test Components JS'
        uses: ./.github/actions/docker-run-playwright
        with:
          entrypoint: run-test-smoke
          args: --components-js
      - name: 'Smoke Test Components React'
        uses: ./.github/actions/docker-run-playwright
        with:
          entrypoint: run-test-smoke
          args: --components-react
  release-components-uxpin:
    name: 'Release Components UXPin'
    needs:
      - assets-deployment
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # important for uxpin since it uses the commit history
      - name: 'Cache node_modules'
        uses: actions/cache@v3
        id: cache-node_modules
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - name: 'Login to GitHub Container Registry'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Pull Docker Image'
        run: docker pull ${{ env.PDS_NODE_DOCKER_IMAGE }} # different docker image
      - name: 'Install'
        if: steps.cache-node_modules.outputs.cache-hit != 'true'
        uses: ./.github/actions/docker-run-node
        with:
          entrypoint: run-install
      - name: 'Restore Components JS Build Artifact'
        uses: actions/download-artifact@v3
        with:
          name: components-js-prod-build
          path: ./packages/components-js/dist
      - name: 'Restore Components UXPin Source Artifact'
        uses: actions/download-artifact@v3
        with:
          name: components-uxpin-source
          path: ./packages/components-react/projects/uxpin-wrapper
      - name: 'Publish UXPin Library'
        uses: ./.github/actions/docker-run-node
        env:
          UXPIN_TOKEN_DEV: ${{ secrets.UXPIN_TOKEN_DEV }}
          UXPIN_TOKEN_LATEST: ${{ secrets.UXPIN_TOKEN_LATEST }}
        with:
          entrypoint: run-release-uxpin
  release-components-js:
    name: 'Release Components JS'
    needs:
      - smoke-test
      - storefront-deployment
    if: startsWith( github.ref, 'refs/heads/v') || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3
      - name: 'Setup and install'
        uses: ./.github/actions/setup-and-install
        with:
          install: false
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Restore Build Artifact'
        uses: actions/download-artifact@v3
        with:
          name: components-js-prod-build
          path: ./packages/components-js/dist
      - name: 'Publish NPM Package'
        uses: ./.github/actions/docker-run-playwright
        env:
          PORSCHE_NPM_REGISTRY_TOKEN: ${{ secrets.PORSCHE_NPM_REGISTRY_TOKEN }}
          NPMJS_REGISTRY_TOKEN: ${{ secrets.NPMJS_REGISTRY_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          entrypoint: run-release-npm
          args: packages/components-js/dist/components-wrapper
  release-components-angular:
    name: 'Release Components Angular'
    needs:
      - release-components-js
    if: startsWith( github.ref, 'refs/heads/v') || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3
      - name: 'Setup and install'
        uses: ./.github/actions/setup-and-install
        with:
          install: false
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Restore Build Artifact'
        uses: actions/download-artifact@v3
        with:
          name: components-angular-prod-build
          path: ./packages/components-angular/dist/angular-wrapper
      - name: 'Publish NPM Package'
        uses: ./.github/actions/docker-run-playwright
        env:
          PORSCHE_NPM_REGISTRY_TOKEN: ${{ secrets.PORSCHE_NPM_REGISTRY_TOKEN }}
          NPMJS_REGISTRY_TOKEN: ${{ secrets.NPMJS_REGISTRY_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          entrypoint: run-release-npm
          args: packages/components-angular/dist/angular-wrapper
  release-components-react:
    name: 'Release Components React'
    needs:
      - release-components-js
    if: startsWith( github.ref, 'refs/heads/v') || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3
      - name: 'Setup and install'
        uses: ./.github/actions/setup-and-install
        with:
          install: false
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Restore Build Artifact'
        uses: actions/download-artifact@v3
        with:
          name: components-react-prod-build
          path: ./packages/components-react/dist/react-wrapper
      - name: 'Publish NPM Package'
        uses: ./.github/actions/docker-run-playwright
        env:
          PORSCHE_NPM_REGISTRY_TOKEN: ${{ secrets.PORSCHE_NPM_REGISTRY_TOKEN }}
          NPMJS_REGISTRY_TOKEN: ${{ secrets.NPMJS_REGISTRY_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          entrypoint: run-release-npm
          args: packages/components-react/dist/react-wrapper
  release-components-vue:
    name: 'Release Components Vue'
    needs:
      - release-components-js
    if: startsWith( github.ref, 'refs/heads/v') || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3
      - name: 'Setup and install'
        uses: ./.github/actions/setup-and-install
        with:
          install: false
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Restore Build Artifact'
        uses: actions/download-artifact@v3
        with:
          name: components-vue-prod-build
          path: ./packages/components-vue/dist/vue-wrapper
      - name: 'Publish NPM Package'
        uses: ./.github/actions/docker-run-playwright
        env:
          PORSCHE_NPM_REGISTRY_TOKEN: ${{ secrets.PORSCHE_NPM_REGISTRY_TOKEN }}
          NPMJS_REGISTRY_TOKEN: ${{ secrets.NPMJS_REGISTRY_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          entrypoint: run-release-npm
          args: packages/components-vue/dist/vue-wrapper
  release-assets:
    name: 'Release Assets'
    needs:
      - smoke-test
      - storefront-deployment
    if: startsWith( github.ref, 'refs/heads/v') || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3
      - name: 'Setup and install'
        uses: ./.github/actions/setup-and-install
        with:
          install: false
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Restore Build Artifact'
        uses: actions/download-artifact@v3
        with:
          name: assets-build
          path: ./packages/assets/dist
      - name: 'Publish NPM Package'
        uses: ./.github/actions/docker-run-playwright
        env:
          PORSCHE_NPM_REGISTRY_TOKEN: ${{ secrets.PORSCHE_NPM_REGISTRY_TOKEN }}
          NPMJS_REGISTRY_TOKEN: ${{ secrets.NPMJS_REGISTRY_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          entrypoint: run-release-npm
          args: packages/assets/dist
